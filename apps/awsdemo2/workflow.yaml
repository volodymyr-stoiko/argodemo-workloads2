apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: aws-s3-workflow
  namespace: default
spec:
  schedule: "*/1 * * * *"
  concurrencyPolicy: "Replace"
  startingDeadlineSeconds: 0
  workflowSpec:
    entrypoint: aws-s3-ls
    templates:
    - name: aws-s3-ls-folder
      inputs:
        parameters:
        - name: path
      container:
        image: corest/awscli
        args:
        - /bin/sh
        - -c
        - "aws s3 ls {{inputs.parameters.path}}"
      serviceAccountName: awsdemo
      env:
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::739267361879:role/eksctl-tooling-cluster-addon-iamserviceaccou-Role1-18GKT0F53GS0Z
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      volumeMounts:
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
      restartPolicy: OnFailure
      volumes:
      - name: aws-iam-token
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              audience: sts.amazonaws.com
              expirationSeconds: 86400
              path: token
    - name: aws-s3-ls
      dag:
        tasks:
        - name: A
          template: aws-s3-ls-folder
          arguments:
            parameters: [{name: path, value: ndm-repo-common}]
        - name: B
          dependencies: [A]
          template: aws-s3-ls-folder
          arguments:
            parameters: [{name: path, value: ndm-repo-npn-backups}]
        - name: C
          dependencies: [A]
          template: aws-s3-ls-folder
          arguments:
            parameters: [{name: path, value: ndm-repo-npn-circleci-artefacts}]
        - name: D
          dependencies: [B, C]
          template: aws-s3-ls-folder
          arguments:
            parameters: [{name: path, value: ndm-repo-npn-s3-events}]
